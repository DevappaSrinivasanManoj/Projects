import math
import sympy as sp
import ipywidgets as widgets
from IPython.display import display

# --- Global State ---
calc_state = {
    "expression": "",
    "currentFunction": "",
    "result": ""
}

# --- Display Widgets ---
display_style = "text-align:right; font-size:32px; color:white; background:#1a1a1a; padding:10px; border-radius:8px; min-height:45px;"

expression_display = widgets.HTML(value=f"<div style='{display_style}'>{calc_state['expression']}</div>")
result_display = widgets.HTML(value=f"<div style='{display_style}'>{calc_state['result']}</div>")

# --- Equation Solver UI Elements ---
equation_dropdown = widgets.Dropdown(
    options=[
        ("Select", ""), 
        ("2 Variables (x, y)", "2var"), 
        ("3 Variables (x, y, z)", "3var"),
        ("Quadratic (ax² + bx + c = 0)", "quad"),
        ("Cubic (ax³ + bx² + cx + d = 0)", "cubic")
    ],
    description="Equation Solver:",
    style={'description_width': 'initial'}
)

solve_button = widgets.Button(description="Solve", button_style="primary", layout=widgets.Layout(display="none"))  
close_button = widgets.Button(description="Close", button_style="danger", layout=widgets.Layout(display="none"))  
equation_container = widgets.VBox([])  
equation_result_display = widgets.HTML(value="")  

# --- Equation Solver ---
def generate_equation_inputs(change):
    selection = change['new']
    if not selection:
        equation_container.children = []
        solve_button.layout.display = "none"
        close_button.layout.display = "none"
        return
    
    input_grid = []
    if selection in ["2var", "3var"]:
        num_vars = 2 if selection == "2var" else 3
        headers = ["x", "y", "z"][:num_vars] + ["="]
        for row in range(num_vars):
            row_inputs = [widgets.FloatText(value=0, layout=widgets.Layout(width='60px')) for _ in range(num_vars + 1)]
            input_grid.append(row_inputs)
    
    elif selection == "quad":
        headers = ["a (x²)", "b (x)", "c (= 0)"]
        input_grid = [[widgets.FloatText(value=0, layout=widgets.Layout(width='80px')) for _ in range(3)]]
    
    elif selection == "cubic":
        headers = ["a (x³)", "b (x²)", "c (x)", "d (= 0)"]
        input_grid = [[widgets.FloatText(value=0, layout=widgets.Layout(width='80px')) for _ in range(4)]]

    grid_ui = [widgets.HBox([widgets.Label(value=h, layout=widgets.Layout(width='80px')) for h in headers])]
    for row in input_grid:
        grid_ui.append(widgets.HBox(row))
    
    equation_container.children = grid_ui
    solve_button.on_click(lambda b: solve_equations(selection, input_grid))
    
    solve_button.layout.display = "block"
    close_button.layout.display = "block"

def solve_equations(selection, input_grid):
    try:
        if selection in ["2var", "3var"]:
            num_vars = 2 if selection == "2var" else 3
            symbols = sp.symbols('x y z')[:num_vars]
            equations = []

            for row in input_grid:
                lhs = sum(coeff.value * var for coeff, var in zip(row[:-1], symbols))
                rhs = row[-1].value
                equations.append(sp.Eq(lhs, rhs))

            solution = sp.solve(equations, symbols)
        
        elif selection == "quad":
            a, b, c = [cell.value for cell in input_grid[0]]
            x = sp.Symbol('x')
            solution = sp.solve(a*x**2 + b*x + c, x)

        elif selection == "cubic":
            a, b, c, d = [cell.value for cell in input_grid[0]]
            x = sp.Symbol('x')
            solution = sp.solve(a*x**3 + b*x**2 + c*x + d, x)

        result_text = ", ".join(f"x = {sol}" for sol in solution) if solution else "No real solutions"
        equation_result_display.value = f"<div style='{display_style}'>{result_text}</div>"
    
    except Exception:
        equation_result_display.value = f"<div style='{display_style}'>Error: Invalid input</div>"

def close_equation_solver(b=None):
    equation_container.children = []
    equation_result_display.value = ""
    solve_button.layout.display = "none"
    close_button.layout.display = "none"

# --- Calculator Functions ---
def append_to_expr(val):
    calc_state["expression"] += val
    update_display()

def clear_calc(b=None):
    calc_state["expression"] = ""
    calc_state["currentFunction"] = ""
    calc_state["result"] = ""
    update_display()

def backspace(b=None):
    calc_state["expression"] = calc_state["expression"][:-1]
    update_display()

def set_function(func):
    calc_state["currentFunction"] = func
    calc_state["expression"] = ""  
    calc_state["result"] = ""
    update_display()

def calculate(b=None):
    try:
        if calc_state["currentFunction"]:
            value = float(calc_state["expression"]) if calc_state["expression"] else 0
            func = calc_state["currentFunction"]
            
            if func == "sin":
                calc_state["result"] = str(math.sin(math.radians(value)))  
            elif func == "log":
                calc_state["result"] = str(math.log10(value)) if value > 0 else "Error"
            
            calc_state["expression"] = f"{func}({value})"
            calc_state["currentFunction"] = ""  
        
        else:
            calc_state["result"] = str(eval(calc_state["expression"]))  

        update_display()
    except Exception:
        calc_state["result"] = "Error"
        update_display()

# --- Create Buttons ---
btn_clear = widgets.Button(description="C", button_style="warning")
btn_back = widgets.Button(description="⌫", button_style="warning")

btn_sin = widgets.Button(description="sin", button_style="info")
btn_log = widgets.Button(description="log", button_style="info")

btn_clear.on_click(clear_calc)
btn_back.on_click(backspace)
btn_sin.on_click(lambda b: set_function("sin"))
btn_log.on_click(lambda b: set_function("log"))
close_button.on_click(close_equation_solver)

top_row = widgets.HBox([btn_clear, equation_dropdown])
equation_buttons = widgets.HBox([solve_button, close_button])
equation_ui = widgets.VBox([equation_container, equation_buttons, equation_result_display])

second_row = widgets.HBox([btn_back, btn_sin, btn_log])

button_descriptions = ["7", "8", "9", "/", "4", "5", "6", "*", "1", "2", "3", "-", "0", ".", "=", "+"]

num_buttons = []
for desc in button_descriptions:
    btn = widgets.Button(description=desc)
    if desc == "=":
        btn.on_click(calculate)
    else:
        btn.on_click(lambda b, d=desc: append_to_expr(d))
    num_buttons.append(btn)

grid = widgets.GridBox(num_buttons, layout=widgets.Layout(grid_template_columns="repeat(4, 1fr)", grid_gap="5px"))

equation_dropdown.observe(generate_equation_inputs, names="value")

calc_ui = widgets.VBox([expression_display, result_display, top_row, equation_ui, second_row, grid])

update_display()
display(calc_ui)