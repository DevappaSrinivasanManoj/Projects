import math
import sympy as sp
from fractions import Fraction

def display_menu():
    print("\n" + "="*50)
    print("Scientific Calculator".center(50))
    print("="*50)
    print("1. Basic Operations")
    print("2. Trigonometric Functions")
    print("3. Logarithms/Exponentials")
    print("4. Matrix Operations")
    print("5. Equation Solver")
    print("6. Integral Calculator")
    print("7. Number Inverse")
    print("8. Decimal to Fraction")
    print("9. Inverse Trigonometric Functions")
    print("10. Exit")
    print("="*50)

def basic_operations():
    try:
        expr = input("Enter expression (e.g., 3+5*2): ")
        result = eval(expr)
        print(f"Result: {result}")
    except Exception as e:
        print(f"Error: {str(e)}")

def trig_functions():
    angle = float(input("Enter angle in degrees: "))
    rad = math.radians(angle)
    print(f"sin: {math.sin(rad):.6f}")
    print(f"cos: {math.cos(rad):.6f}")
    print(f"tan: {math.tan(rad):.6f}")

def log_exp():
    num = float(input("Enter number: "))
    base = float(input("Enter log base (e for natural log): ").replace('e', str(math.e)))
    if num <= 0 or base <= 0:
        print("Error: Values must be positive")
        return
    print(f"log{base}({num}) = {math.log(num, base):.6f}")

def matrix_operations():
    print("1. Addition\n2. Multiplication\n3. Inverse\n4. Determinant")
    choice = input("> ")
    try:
        if choice in ['1', '2']:
            mat1 = get_matrix("first")
            mat2 = get_matrix("second") if choice == '1' else get_matrix("second (columns must match first's rows)")
        else:
            mat = get_matrix("")

        if choice == '1':
            if len(mat1) != len(mat2) or len(mat1[0]) != len(mat2[0]):
                raise ValueError("Matrices must have same dimensions")
            result = [[a + b for a, b in zip(r1, r2)] for r1, r2 in zip(mat1, mat2)]
        elif choice == '2':
            if len(mat1[0]) != len(mat2):
                raise ValueError("Columns of first must match rows of second")
            result = [[sum(a*b for a, b in zip(r, c)) for c in zip(*mat2)] for r in mat1]
        elif choice == '3':
            sym_mat = sp.Matrix(mat)
            result = sym_mat.inv().tolist()
        elif choice == '4':
            sym_mat = sp.Matrix(mat)
            print(f"Determinant: {sym_mat.det():.6f}")
            return
        else:
            print("Invalid choice")
            return

        print_matrix(result)
    except Exception as e:
        print(f"Error: {str(e)}")

def get_matrix(name):
    rows = int(input(f"Enter {name} matrix rows: "))
    cols = int(input(f"Enter {name} matrix columns: "))
    matrix = []
    for i in range(rows):
        row = list(map(float, input(f"Row {i+1} (space-separated): ").split()))
        if len(row) != cols:
            raise ValueError("Invalid row length")
        matrix.append(row)
    return matrix

def print_matrix(mat):
    print("\nResult Matrix:")
    for row in mat:
        print(" | ".join(f"{num:>8.4f}" for num in row))

def equation_solver():
    print("1. Linear (2-4 vars)\n2. Quadratic\n3. Cubic")
    choice = input("> ")
    try:
        if choice == '1':
            n = int(input("Enter number of variables (2-4): "))
            if n < 2 or n > 4:
                raise ValueError
            solve_linear(n)
        elif choice == '2':
            a, b, c = map(float, input("Enter a b c: ").split())
            solve_quadratic(a, b, c)
        elif choice == '3':
            a, b, c, d = map(float, input("Enter a b c d: ").split())
            solve_cubic(a, b, c, d)
    except Exception as e:
        print(f"Error: {str(e)}")

def solve_linear(n):
    vars = sp.symbols('x y z w')[:n]
    eqs = []
    for i in range(n):
        eq = input(f"Eq {i+1}: ").replace('=', '-')
        eqs.append(sp.parse_expr(eq))
    solution = sp.linsolve(eqs, vars)
    print_solutions(solution)

def solve_quadratic(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        x1 = (-b + math.sqrt(discriminant)) / (2*a)
        x2 = (-b - math.sqrt(discriminant)) / (2*a)
        print(f"x1 = {x1:.6f}\nx2 = {x2:.6f}")
    elif discriminant == 0:
        print(f"x = {-b/(2*a):.6f}")
    else:
        real = -b/(2*a)
        imag = math.sqrt(-discriminant)/(2*a)
        print(f"x = {real:.6f} Â± {imag:.6f}i")

def solve_cubic(a, b, c, d):
    x = sp.symbols('x')
    solutions = sp.solve(a*x**3 + b*x**2 + c*x + d, x)
    print_solutions(solutions)

def print_solutions(solutions):
    if not solutions:
        print("No solution")
        return
    for i, sol in enumerate(solutions):
        print(f"Solution {i+1}: {sol.evalf():.6f}")

def integral_calculator():
    f = input("Enter function (in terms of x): ")
    a = float(input("Lower limit: "))
    b = float(input("Upper limit: "))
    x = sp.symbols('x')
    integral = sp.integrate(sp.parse_expr(f), (x, a, b))
    print(f"Definite integral: {integral.evalf():.6f}")

def number_inverse():
    num = float(input("Enter number: "))
    if num == 0:
        print("Error: Division by zero")
    else:
        print(f"1/{num} = {1/num:.10f}")

def decimal_to_fraction():
    num = input("Enter decimal: ")
    try:
        f = Fraction(num).limit_denominator()
        print(f"{num} = {f.numerator}/{f.denominator}")
    except:
        print("Invalid decimal")

def inverse_trig():
    print("1. arcsin\n2. arccos\n3. arctan")
    choice = input("> ")
    val = float(input("Enter value: "))
    try:
        if choice == '1':
            if abs(val) > 1:
                raise ValueError("Value must be between -1 and 1")
            res = math.degrees(math.asin(val))
        elif choice == '2':
            if abs(val) > 1:
                raise ValueError("Value must be between -1 and 1")
            res = math.degrees(math.acos(val))
        elif choice == '3':
            res = math.degrees(math.atan(val))
        else:
            print("Invalid choice")
            return
        print(f"Result: {res:.6f} degrees")
    except Exception as e:
        print(f"Error: {str(e)}")
        
def main():
    while True:
        display_menu()
        choice = input("Enter choice (1-10): ")
        if choice == '10':
            print("Exiting calculator...")
            break
        try:
            {
                '1': basic_operations,
                '2': trig_functions,
                '3': log_exp,
                '4': matrix_operations,
                '5': equation_solver,
                '6': integral_calculator,
                '7': number_inverse,
                '8': decimal_to_fraction,
                '9': inverse_trig
            }.get(choice, lambda: print("Invalid choice"))()
            
            # Add 5 blank lines after each operation output [[1]]
            print("\n" * 5)
            
        except Exception as e:
            print(f"Unexpected error: {str(e)}")
            print("\n" * 5)  # Maintain spacing even for errors

if __name__ == "__main__":
    main()